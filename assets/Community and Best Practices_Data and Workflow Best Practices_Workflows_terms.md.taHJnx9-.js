import{_ as e,c as r,a7 as o,o as s}from"./chunks/framework.BKiDQeMP.js";const m=JSON.parse('{"title":"Key Terms","description":"","frontmatter":{"order":3},"headers":[],"relativePath":"Community and Best Practices/Data and Workflow Best Practices/Workflows/terms.md","filePath":"Community and Best Practices/Data and Workflow Best Practices/Workflows/terms.md"}'),n={name:"Community and Best Practices/Data and Workflow Best Practices/Workflows/terms.md"};function a(i,t,d,c,l,u){return s(),r("div",null,t[0]||(t[0]=[o('<h1 id="key-terms" tabindex="-1">Key Terms <a class="header-anchor" href="#key-terms" aria-label="Permalink to &quot;Key Terms&quot;">​</a></h1><h2 id="acronyms-abbreviations-and-terms" tabindex="-1">Acronyms, Abbreviations, and Terms <a class="header-anchor" href="#acronyms-abbreviations-and-terms" aria-label="Permalink to &quot;Acronyms, Abbreviations, and Terms&quot;">​</a></h2><table tabindex="0"><thead><tr><th><strong>Term</strong></th><th><strong>Meaning</strong></th></tr></thead><tbody><tr><td><strong>Logging</strong></td><td>Automatically recording configuration settings, inputs, and outputs when a workflow runs. Logging helps ensure that analyses can be <strong>reproduced</strong> and errors traced efficiently.</td></tr><tr><td><strong>Maintainability</strong></td><td>The ease with which code can be read, understood, and updated by others. Well-documented, modular workflows are more maintainable and easier to build upon.</td></tr><tr><td><strong>Modularity</strong></td><td>Writing code in <strong>reusable, independent components</strong> (modules or functions). This makes workflows easier to test, debug, and share between projects.</td></tr><tr><td><strong>Notebooks</strong></td><td>Interactive documents combining code, text, and results (e.g., Jupyter Notebooks). Ideal for exploration and training, but final reproducible workflows should also be submitted as <strong>scripts or packaged code</strong> to ensure consistent execution.</td></tr><tr><td><strong>Packages</strong></td><td>Reusable code collections distributed with documentation (e.g., Python packages or R libraries). Packages promote consistency, reduce duplication, and simplify sharing code used in workflows.</td></tr><tr><td><strong>Parameters and Arguments</strong></td><td>Configurable inputs that allow workflows to be flexible and reusable. Parameters define expected inputs; arguments are the specific values passed when running the workflow.</td></tr><tr><td><strong>Pipeline</strong></td><td>A structured sequence of processing steps, where outputs from one stage feed into the next. Workflows should define clear <strong>input, processing, and output stages</strong> to ensure reproducibility.</td></tr><tr><td><strong>Readability</strong></td><td>The clarity of your code — making it understandable for collaborators and reviewers. Readable code is <strong>consistent, well-documented, and logically structured</strong>.</td></tr><tr><td><strong>Reproducible Analytical Pipelines (RAP)</strong></td><td>Workflows built using open tools, good coding practices, and automation, ensuring that results can be independently reproduced. RAPs embody the FAIR and Open Science principles promoted by EarthCODE.</td></tr><tr><td><strong>Scripts</strong></td><td>A code file that performs specific analysis steps or orchestrates an entire workflow. All scripts should run <strong>without manual intervention</strong> to support reproducibility.</td></tr><tr><td><strong>Version Control</strong></td><td>Tracking and managing changes in your code over time. Tools like <strong>Git</strong>, combined with platforms such as <strong>GitHub</strong>, <strong>GitLab</strong>, or <strong>BitBucket</strong>, allow collaborative development and open publication of your workflows.</td></tr><tr><td><strong>Virtual Environments</strong></td><td>Isolated software setups containing the specific versions of dependencies required by a workflow. They help ensure that analyses remain reproducible across systems and time.</td></tr></tbody></table>',3)]))}const p=e(n,[["render",a]]);export{m as __pageData,p as default};
