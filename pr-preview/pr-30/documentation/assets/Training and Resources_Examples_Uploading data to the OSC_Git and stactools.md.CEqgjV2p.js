import{_ as a,c as i,a3 as t,o as e}from"./chunks/framework.DvH_et9L.js";const k=JSON.parse('{"title":"Stactools Full Example","description":"","frontmatter":{"order":3},"headers":[],"relativePath":"Training and Resources/Examples/Uploading data to the OSC/Git and stactools.md","filePath":"Training and Resources/Examples/Uploading data to the OSC/Git and stactools.md"}'),n={name:"Training and Resources/Examples/Uploading data to the OSC/Git and stactools.md"};function l(o,s,r,h,p,d){return e(),i("div",null,s[0]||(s[0]=[t(`<h1 id="stactools-full-example" tabindex="-1">Stactools Full Example <a class="header-anchor" href="#stactools-full-example" aria-label="Permalink to &quot;Stactools Full Example&quot;">​</a></h1><h3 id="system-requirements" tabindex="-1"><strong>System requirements</strong> <a class="header-anchor" href="#system-requirements" aria-label="Permalink to &quot;**System requirements**&quot;">​</a></h3><ul><li>Ubuntu OS min version &gt; 20. Script tested on Ubuntu 22.04 and Ubuntu 20.04 version.</li><li>Minimum requirements: 2 GB RAM, 2 CPUs, 32 GB of disk space.</li><li>User with full sudo privileges to run all Linux commands and install packages as root.</li><li><strong>Selection of packages to be installed in order to run bash script:</strong> python 3 <strong>,</strong> gdal <strong>,</strong> tree, jq, parallel <strong>,</strong> curl, stactools.</li><li>Python 3.8 or greater</li><li>Following dependencies are necessary to make correct conversion of products to be published: <code>stactools</code> - to manage STAC catalogs <code>stactools-datacube</code> - to enrich STAC items with datacube metadata Please find full documentation and installation instructions here: <a href="https://stactools.readthedocs.io/en/stable/index.html" target="_blank" rel="noreferrer">https://stactools.readthedocs.io/en/stable/index.html</a></li></ul><h3 id="add-metadata-of-a-single-product-item-to-the-catalogue" tabindex="-1"><strong>Add metadata of a single product (item) to the catalogue</strong> <a class="header-anchor" href="#add-metadata-of-a-single-product-item-to-the-catalogue" aria-label="Permalink to &quot;**Add metadata of a single product (item) to the catalogue**&quot;">​</a></h3><p>Manual ingestion of single item into catalogue is rather simple and straightforward when you have all metadata prepared correctly and when you follow these few steps on how to add new product (collection.json) to a publicly open repository of Open Science Data Catalogue.</p><p>Please note that this workflow is applicable also to other elements of the catalogue such as Projects, Themes, Variables, EO Missions. Here the procedure of adding or updating metadata of single item using GitHub on Web browser is provided.</p><ol><li>Go to <strong>open-science-catalog-metadata-staging</strong> repository: <a href="https://github.com/EOEPCA/open-science-catalog-metadata-staging" target="_blank" rel="noreferrer">https://github.com/EOEPCA/open-science-catalog-metadata-staging</a></li></ol><p><img src="https://github.com/EOEPCA/open-science-catalog-metadata/assets/120453810/b852819b-5ed5-4a51-bc09-cf4cfdf05ff9" alt="osc-metadata-github"></p><ol start="2"><li>Go to <strong>/products/</strong> folder to extend the list of products:</li></ol><p><img src="https://github.com/EOEPCA/open-science-catalog-metadata/assets/120453810/1b4cd860-c7ed-431b-8b9d-128bbf051e0e" alt="products-github"></p><ol start="3"><li><p>Open any folder with the short product name and check the metadata file stored in <em>collection.json</em> format.</p></li><li><p>Click on Editing mode and open JSON file with github.dev to make changes or to copy the content of JSON file in web-based editor.</p></li></ol><p><img src="https://github.com/EOEPCA/open-science-catalog-metadata/assets/120453810/b3c0ea6b-32e0-40ef-9ad9-3cab050d16c1" alt="collection-json-github"></p><ol start="5"><li>In GutHub web-based text editor (github.dev), select &quot;Source controller&quot; and &quot;Create a new branch&quot;</li></ol><p><img src="https://github.com/EOEPCA/open-science-catalog-metadata/assets/120453810/d69402d5-786b-4304-805e-cd6e47885da2" alt="branch-git"></p><ol start="6"><li>Switch to new Branch:</li></ol><p><img src="https://github.com/EOEPCA/open-science-catalog-metadata/assets/120453810/9229d871-de81-4921-ba95-1aaaeb51db44" alt="switch-branch"></p><ol start="7"><li><p>Go to <strong>Explorer</strong> and Add a new folder where you can store the collection.json with metadata of your Product. Name your folder with a unique name (id) that you give to your product! <img src="https://github.com/EOEPCA/open-science-catalog-metadata/assets/120453810/4ab60f05-5fbf-4d8a-aeb4-c523c2d3557b" alt="github-dev1"></p></li><li><p>Create collection.json file and add all metadata needed for the product. The simplest way to create a new collection.json is to CTRL+A and CTRL+C of existing collection.json (even from different project and CTRL+V to a new empty collection.json created.</p></li></ol><p><img src="https://github.com/EOEPCA/open-science-catalog-metadata/assets/120453810/405aadda-8826-4c8e-a383-c03e7b96378f" alt="collection-json-inside"></p><ol start="9"><li>You can see the file being modified with the capital letter M.</li></ol><p><img src="https://github.com/EOEPCA/open-science-catalog-metadata/assets/120453810/8492a338-c15d-4746-86d5-7a2429c3b6e5" alt="github-dev-5"></p><ol start="10"><li>Commit and Push changes from Source Control Panel. Write a purpose or a subject of changes made in the &quot;Message&quot; field.</li></ol><p><img src="https://github.com/EOEPCA/open-science-catalog-metadata/assets/120453810/c90f301d-da5e-4f18-b4fa-77ab0dc1f580" alt="github-dev-6"></p><ol start="11"><li>Create Pull Request to request changes in the repository!</li></ol><p><img src="https://github.com/EOEPCA/open-science-catalog-metadata/assets/120453810/ff7ccbaa-75f1-4568-81ce-ed1a052e0ecd" alt="createPR"></p><ol start="12"><li>Once created the Pull Request will be accepted or rejected by open-science-catalog-metadata administrator.</li></ol><h3 id="ingest-metadata-of-assets-with-stac-catalog" tabindex="-1"><strong>Ingest metadata of assets with STAC Catalog</strong> <a class="header-anchor" href="#ingest-metadata-of-assets-with-stac-catalog" aria-label="Permalink to &quot;**Ingest metadata of assets with STAC Catalog**&quot;">​</a></h3><p>As mentioned in the previous sub-chapter metadata repository is stored in the GitHub repository. For ingestion of data that are stored in structural catalog, user should convert this file structure to ingest to STAC catalog. Then created STAC collection can be directly imported to GitHub and merged to existing Open Science Data Catalogue repository.</p><p>To convert the file structure to STAC collection, please refer to <a href="https://stactools.readthedocs.io/en/stable/index.html" target="_blank" rel="noreferrer">stactools documentation</a>, which describes best practices on creation of such collection.</p><p>Data owners interested in ingestion of multiple products to the catalog are asked to convert their dataset directly into STAC items collection. This especially refers to large datasets (e.g. multitemporal .nc files containing monthly products for a time period of 20 years). Is such case data owners or principal investigators of the project will be provided with script which facilitates that process of ingestions if such products, allowing their conversion to .json STAC items collection.</p><h3 id="add-multiple-or-single-product-s-stored-in-external-server-open-access-storage-with-stac-catalogue" tabindex="-1"><strong>Add multiple or single product(s) stored in external server (open-access storage) with STAC Catalogue</strong> <a class="header-anchor" href="#add-multiple-or-single-product-s-stored-in-external-server-open-access-storage-with-stac-catalogue" aria-label="Permalink to &quot;**Add multiple or single product(s) stored in external server (open-access storage) with STAC Catalogue**&quot;">​</a></h3><p>In the previous section the steps applied described a process to ingest metadata and the access to products stored in external server which may provide open data access to anyone or to registered users in some cases.</p><p>In this scenario complete instructions are provided for how to import larger datasets when multiple changes to the files stored in open science data catalog in GitHub repository are required. With our current system, it is impossible for the user to keep track 10+ open pull requests, so when user requires multiple changes at once, Git with a code editor is recommended.</p><p>The description on how to import STAC catalogue which is preferred method of an ingestion of asset metadata is described in details. This will allow end users to access metadata of individual granules (stored originally in the cloud-native external server) and download them to local storage separately without the need of bulk downloading of all files at once. The workflow includes:</p><ol><li><p><strong>Find the description of the dataset in Open Science Data Catalogue frontend</strong>. If the product (dataset) does not exist in the catalog yet, add it to the catalog first! (see subchapter above).</p></li><li><p><strong>Prepare an upload dataset (assets / granules)</strong> This step is a <strong>prerequisite that must be met for any data collection to make it publicly available and allow end user to discover and use the data.</strong> This can be done in two modes: a) uploading data to s3 bucket administrated by OSC developers, b) <strong>provide link to capable HTTP where files</strong> are already available to download or / and preview.</p></li></ol><p>In this case assets are stored in open-access repository: <a href="https://zenodo.org/record/7568049#.ZDbG4nbP1aQ" target="_blank" rel="noreferrer">https://zenodo.org/record/7568049#.ZDbG4nbP1aQ</a>.</p><p><strong>Therefore, no preliminary steps are required related to data relocation from this source repository.</strong> The preparation of the dataset must consist first of assessing the exact full path to original repository for each granule. In this case the list of products is loaded and save in standard text file:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">curl</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -sL</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;https://zenodo.org/record/7568049#.ZDbG4nbP1aQ&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> grep</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -oP</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;&lt;a href=&quot;\\K([^&quot;]+\\.tif)&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> tiff_links.txt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sed</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -i</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;s|^|https://zenodo.org|&#39;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> tiff_links.txt</span></span></code></pre></div><ul><li>In case of a long list of files to be converted at once it is advised to split the list of links for each granule into smaller list. It has been confirmed that up to 10 files can be written to JSON format at once using the tool proposed.</li></ul><ol start="3"><li><strong>Create STAC Catalog for the dataset</strong></li></ol><p>a. Create a structure of <em>catalog.json</em> (could only be 1, but depending on the dataset size and structure it can be more) b. Create STAC Items data items (granules). Either: i. <strong>for 2D raster datasets:</strong> _ <strong><code>stac create-item</code></strong> _ ii. for netcdfs/ZARRs <em><code>stac datacube create</code></em> iii. other tools? iv. or manually***</p><p>In this scenario a 2D raster datasets are used and the STAC catalog is created with open-source <em>tool &#39;stac create-item&#39;</em> (i). In case of multiple items to be converted at once, a for loop is created to create stac item .json file for each granule by accessing separate item in a loop:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mkdir</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> item_files</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ; </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> line </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">cat</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> tiff_links.txt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">); </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">do</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> item_json</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;item_files/item_</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$line_number</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">.json&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">echo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $line ; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">stac</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> create-item</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$line</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> tee</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$item_json</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sleep</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; ((line_number</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)); </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">done</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;tiff_links.txt&quot;</span></span></code></pre></div><p>** Note: once files are created, you can access the metadata by opening and reading single item.json file with cat item.json</p><p>*** Future updates in the guide are foreseen and guidance specific to most commonly used data formats will be provided. To manually create JSON file, please refer to general file structure provided in the STAC documentation: <a href="https://github.com/radiantearth/stac-spec/blob/master/examples/core-item.json" target="_blank" rel="noreferrer">https://github.com/radiantearth/stac-spec/blob/master/examples/core-item.json</a>.</p><p>c. <strong>Add STAC Items into Catalog structure</strong></p><p>To create appropriately <em>catalog.json</em> file that lists <strong>all related items</strong> to specific collection and gathers them in the catalog, it is necessary to follow strict <em>catalog.json</em> file formatting as suggested in:</p><p><a href="https://github.com/radiantearth/stac-spec/blob/master/examples/catalog.json" target="_blank" rel="noreferrer"><strong>https://github.com/radiantearth/stac-spec/blob/master/examples/catalog.json</strong></a></p><p><strong>Please download the template on how this catalog.json should looks like and</strong> <strong>upload it into the directory where the item files are stored.</strong></p><ul><li><p><strong>Make necessary correction to imported catalog.json example file:</strong></p></li><li><p>the only changes which are required is to <strong>remove &quot;child&quot; and &quot;item&quot; entries</strong> from the catalog.json.</p></li><li><p>Item entries will be updated automatically once you add the assets.</p></li><li><p>Update the default description and title of the catalog</p></li></ul><p>The final catalog.json should looks like this:</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;type&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Catalog&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;id&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;examples&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;title&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Example catalog&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;stac_version&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;1.0.0&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;description&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;This catalog is a simple demonstration of an example catalog that is used to organize STAC Items&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;links&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;rel&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;self&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;href&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;https://raw.githubusercontent.com/radiantearth/stac-spec/v1.1.0/examples/catalog.json&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;type&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;application/json&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;rel&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;root&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;href&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./catalog.json&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;type&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;application/json&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;title&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Example catalog&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>NOTE: While working on Linux based environment you can make changes with <code>vi catalog.json</code> in terminal.</p><ul><li>**Add STAC Items to a common _<strong>catalog.json</strong> _ <strong>by applying</strong> _ <strong>&#39;stac add&#39;</strong> _ <strong>command</strong></li></ul><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> item_file </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> item_files/item_*.json</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">do</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> stac</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> add</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$item_file</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> catalog.json</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">done</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><ul><li><strong>Export the catalog structure</strong> _ <strong><code>stac copy</code></strong> _</li></ul><p><strong>Before performing this step, remember to</strong> <strong>change the directory</strong> <strong>from the input data collection to output repository which will be copied to s3 bucket!</strong></p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">stac</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> copy</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> catalog.json</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> item_10files/out_json/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -l[https://s3.waw2-1.cloudferro.com/swift/v1/AUTH_3f7e5dd853f54cebb046a29a69f1bba6/Catalogs/4DGreenland/supraglacial-storage-and-drainage-lake-features-mapped-by-sentinel1/catalog.json](https://s3.waw2-1.cloudferro.com/swift/v1/AUTH_3f7e5dd853f54cebb046a29a69f1bba6/Catalogs/4DGreenland/supraglacial-storage-and-drainage-lake-features-mapped-by-sentinel1/catalog.json</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>NOTE: Check first the location of your product within the Open Science Data Catalog repository!</p><ol start="4"><li><strong>Upload STAC Catalog to S3 or another HTTP service</strong></li></ol><p>With this simple command all JSON files (single granules) are moved to dedicated OSC s3 bucket metadata repository:</p><p><code>s3cmd sync item_10files/out_json/ s3://Catalogs/4DGreenland/supraglacial-storage-and-drainage-lake-features-mapped-by-sentinel1/</code></p><ol start="5"><li><strong>Add reference to Product&#39;s metadata and give access to created STAC Catalog</strong></li></ol><p>In OSC Catalogue find target product which needs to be updated with the STAC Item&#39;s collection. To perform this step &#39;<em>href&#39;</em> link must be updated, by inserting the list to catalog.json file stored in s3 repository to Product&#39;s collection.json file. As shown below:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">&quot;rel&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;child&quot;,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">&quot;href&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;https://s3.waw2-1.cloudferro.com/swift/v1/AUTH_3f7e5dd853f54cebb046a29a69f1bba6/Catalogs/4DGreenland/supraglacial-storage-and-drainage-lake-features-mapped-by-sentinel1/catalog.json&quot;,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">&quot;type&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;application/json&quot;,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">&quot;title&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Items&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><strong>NOTE:</strong> You can make changes using GitHub Desktop or within web-based editor as shown in the section before.</p><ol start="6"><li><strong>Commit changes and create Pull Request</strong></li></ol><p>Changes in Product description will be reviewed by OSC administrator and accepted or rejected by administrator.</p><ol start="7"><li><strong>Preview uploaded STAC granules collection in the Open Science Data Catalogue frontend:</strong></li></ol><p><a href="https://opensciencedata.esa.int/products/supraglacial-storage-and-drainage-lake-features-mapped-by-sentinel1/collection" target="_blank" rel="noreferrer"><strong>https://opensciencedata.esa.int/products/supraglacial-storage-and-drainage-lake-features-mapped-by-sentinel1/collection</strong></a></p><h3 id="add-multiple-or-single-product-s-originally-stored-in-local-repository-with-stac-catalogue" tabindex="-1"><strong>Add multiple or single product(s) originally stored in local repository with STAC Catalogue</strong> <a class="header-anchor" href="#add-multiple-or-single-product-s-originally-stored-in-local-repository-with-stac-catalogue" aria-label="Permalink to &quot;**Add multiple or single product(s) originally stored in local repository with STAC Catalogue**&quot;">​</a></h3><p>In this scenario large open-source datacube was investigated and made available to be used by open public. Steps presented in this scenario will allow to first change the location of the dataset to make them accessible to all users and create STAC Catalog filled with metadata from datacube. This will allow end users to access metadata of datacube which is accessible, downloadable and can be visualized or further processed in other locations (e.g. Jupyter Notebooks).</p><ol><li><strong>Prepare an upload data (assets / granules)</strong></li></ol><p>This step is a prerequisite that must be met for any data collection to make it publicly available and allow end user to discover and use the data. This can be done in two modes:</p><p><strong>1) uploading data to s3 bucket administrated by OSC developers,</strong> 2) provide link to capable HTTP where files are already available to download or / and preview.</p><p>In this case the first mode will be used. Datacube is stored in .zip archive making it impossible to be directly accessed and explored. Therefore, a preliminary step required related to data relocation from source repository: <a href="https://zenodo.org/record/8055879" target="_blank" rel="noreferrer"><strong>https://zenodo.org/record/8055879</strong></a>to a dedicated folder in OSCAssets repository in Open Science Data Catalogue S3 storage.</p><p><strong>File relocation requires configured access to dedicated S3 bucket which in this case is granted only to authorized contributors.</strong></p><p>Once configured, downloaded product should be extracted and relocated into designated storage, where it will become accessible for anyone.</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">s3cmd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> sync</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> SeasFireCube_v3.zarr</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> s3://OSCAssets/seasfire/seasfire-cube/SeasFireCube_v3.zarr</span></span></code></pre></div><ol start="2"><li><strong>Create a STAC Catalog for the data</strong> a. Create a structure of catalog.json (could only be 1 if not more is necessary) b. Create STAC Items data items (granules). Either: i. for 2D raster datasets_: <code>stac create-item</code>_ ii. <strong>for netcdfs/ZARRs</strong> _ <strong><code>stac datacube create-item</code></strong> _ iii. other tools? iv. or manually</li></ol><p>** Future updates in the guide are foreseen and guidance specific to most commonly used data formats will be provided. To manually create catalog.json please refer to basic file structure provided in the STAC documentation.</p><p>In this scenario a 3D datacube is used and the STAC catalog is created with open-source <em>tool &#39;stac datacube create-item&#39;</em>. This command uses <em>&#39;stactools&#39;</em> extension package which allows to create or extend STAC Items dealing with multi-dimensional data formats and to extract datacube related metadata from these assets. Full documentation and the latest release of the package can be found under the link here: <a href="https://pypi.org/project/stactools-datacube/" target="_blank" rel="noreferrer">https://pypi.org/project/stactools-datacube/</a>. Once dataset is placed in designated location, it is possible to create JSON file with the following command:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">stac</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> datacube</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> create-item</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> s3://OSCAssets/seasfire/seasfire-cube/SeasFireCube_v3.zarr/</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> item.json</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;--use-driver ZARR</span></span></code></pre></div><p>** Note: once files are created, you can access the metadata by opening and reading single item.json file with <code>cat item.json</code></p><p>Next steps taken to enable product to be discoverable within STAC Catalog are the same as in previous use case (see point <strong>2c - 5</strong>) and follow the steps described in this previous section.</p><p>** Remember to change the folder name and product folder in s3 bucket to relate to adequate product in OSC**</p><ol start="3"><li><p><strong>Commit changes and create Pull Request Preview uploaded STAC Item catalog:</strong> Changes in Product description will be reviewed by OSC administrator and accepted or rejected by administrator.</p></li><li><p><strong>Preview uploaded STAC granules collection in the Open Science Data Catalogue frontend:</strong><a href="https://opensciencedata.esa.int/products/seasfire-cube/collection" target="_blank" rel="noreferrer">https://opensciencedata.esa.int/products/seasfire-cube/collection</a></p></li><li><p><strong>Data can be visualized using Jupyter Notebook and dedicated &#39;xarray&#39; Python package to further work with the datacube on-the-cloud and visualize variables.</strong></p></li></ol><p>Full metadata contained in the .zarr file can also be read directly from the browser under: <a href="https://s3.waw2-1.cloudferro.com/swift/v1/AUTH_3f7e5dd853f54cebb046a29a69f1bba6/OSCAssets/seasfire/seasfire-cube/SeasFireCube_v3.zarr/.zmetadata" target="_blank" rel="noreferrer">https://s3.waw2-1.cloudferro.com/swift/v1/AUTH_3f7e5dd853f54cebb046a29a69f1bba6/OSCAssets/seasfire/seasfire-cube/SeasFireCube_v3.zarr/.zmetadata</a></p><h3 id="add-multiple-assets-at-once-with-github" tabindex="-1"><strong>Add multiple assets at once with GitHub</strong> <a class="header-anchor" href="#add-multiple-assets-at-once-with-github" aria-label="Permalink to &quot;**Add multiple assets at once with GitHub**&quot;">​</a></h3><p>Once created the JSON files describing each single asset of larger products collection can be imported to Open Science Data Catalogue repository of metadata at once using GitHub.</p><p>For this, GitHub CLI or <code>gh</code> should be used. GitHub CLI is a command-line interface to GitHub for use in terminal or scripts. It facilitates the process of making changes in open access github repository as the one at open-science-data-catalog-metadata and allows to ingest several files at once. To work with this command-line tool. Please check the installation steps first: <a href="https://github.com/cli/cli/blob/trunk/docs/install_linux.md#debian-ubuntu-linux-raspberry-pi-os-apt" target="_blank" rel="noreferrer">https://github.com/cli/cli/blob/trunk/docs/install_linux.md#debian-ubuntu-linux-raspberry-pi-os-apt</a></p><p>To correctly install <code>gh</code> tool, follow these instructions. Please note that instructions provided here refer to Linux Ubuntu OS, and have not been tested on any other software:</p><ol><li><strong>Install System dependencies:</strong></li></ol><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> apt</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> update</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> apt</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -y</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> python3</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> python3-pip</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> gdal-bin</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> tree</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> jq</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> parallel</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> curl</span></span></code></pre></div><ol start="2"><li><strong>Install &#39;gh&#39; tool. In case you encounter any issues please follow instructions from here:</strong> <a href="https://github.com/cli/cli/blob/trunk/docs/install_linux.md#debian-ubuntu-linux-raspberry-pi-os-apt" target="_blank" rel="noreferrer">https://github.com/cli/cli/blob/trunk/docs/install_linux.md#debian-ubuntu-linux-raspberry-pi-os-apt</a></li></ol><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">type</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -p</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> curl</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/dev/null</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ||</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> apt</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> update</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> &amp;&amp; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> apt</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> curl</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -y</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">curl</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -fsSL</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> https://cli.github.com/packages/githubcli-archive-keyring.gpg</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> dd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> of=/usr/share/keyrings/githubcli-archive-keyring.gpg</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&amp;&amp; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> chmod</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> go+r</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /usr/share/keyrings/githubcli-archive-keyring.gpg</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&amp;&amp; </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">echo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;deb [arch=$(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">dpkg</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --print-architecture</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> tee</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /etc/apt/sources.list.d/github-cli.list</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /dev/null</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&amp;&amp; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> apt</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> update</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&amp;&amp; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> apt</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> gh</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -y​</span></span></code></pre></div><ol start="3"><li><strong>Install Python dependencies</strong></li></ol><p>Following dependencies are necessary to make correct conversion of products to be published:</p><ul><li><code>stactools</code> - to manage STAC catalogs</li><li><code>stactools-datacube</code> - to enrich STAC items with datacube metadata</li></ul><p>To install following packages copy and paste following in your terminal:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pip</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -U</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> stactools</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> stactools-datacube</span></span></code></pre></div><p>4.<strong>Ingest products to GitHub metadata repository using GitHub CLI</strong></p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># clone the git repository:</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">gh</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> repo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> clone</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\&lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">insert-user-here</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/open-science-catalog-metadata.git</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># enter repository</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> open-science-catalog-metadata</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># create a new branch to work on</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> checkout</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -b</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\&lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">branch-name</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\&gt;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ..</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># merge the output catalog to the metadata repository</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">stac</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> merge</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --as-child</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">folder-with-JSON-files/catalog.json </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># go to the repo again and commit all new/changed files</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> open-science-catalog-metadata</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> add</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\&lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">project-name</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\&lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">product-name</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\&gt;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> commit</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -m</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Adding woc-l4-se-erastar-h\\_v2.0&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> push</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --set-upstream</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> origin</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\&lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">branch-name</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\&gt;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">gh</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> pr</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> create</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -f</span></span></code></pre></div><ol start="5"><li><strong>Check the status of Pull Requests in GitHub:</strong></li></ol><p><a href="https://github.com/EOEPCA/open-science-catalog-metadata/actions" target="_blank" rel="noreferrer">https://github.com/EOEPCA/open-science-catalog-metadata/actions</a></p><ol start="6"><li><strong>Changes to the Catalogue content will be reviewed and accepted or rejected by the OSC Administrator.</strong></li></ol>`,105)]))}const g=a(n,[["render",l]]);export{k as __pageData,g as default};
