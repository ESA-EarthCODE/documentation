{"version":"1","records":[{"hierarchy":{"lvl1":"Creating a STAC Item Catalog"},"type":"lvl1","url":"/creating-an-item-catalog","position":0},{"hierarchy":{"lvl1":"Creating a STAC Item Catalog"},"content":"","type":"content","url":"/creating-an-item-catalog","position":1},{"hierarchy":{"lvl1":"Creating a STAC Item Catalog","lvl3":"Context"},"type":"lvl3","url":"/creating-an-item-catalog#context","position":2},{"hierarchy":{"lvl1":"Creating a STAC Item Catalog","lvl3":"Context"},"content":"","type":"content","url":"/creating-an-item-catalog#context","position":3},{"hierarchy":{"lvl1":"Creating a STAC Item Catalog","lvl4":"Purpose","lvl3":"Context"},"type":"lvl4","url":"/creating-an-item-catalog#purpose","position":4},{"hierarchy":{"lvl1":"Creating a STAC Item Catalog","lvl4":"Purpose","lvl3":"Context"},"content":"In this tutorial we will show how you can create a STAC Item catalog that contains all the necessary information about your datasets.","type":"content","url":"/creating-an-item-catalog#purpose","position":5},{"hierarchy":{"lvl1":"Creating a STAC Item Catalog","lvl4":"Description","lvl3":"Context"},"type":"lvl4","url":"/creating-an-item-catalog#description","position":6},{"hierarchy":{"lvl1":"Creating a STAC Item Catalog","lvl4":"Description","lvl3":"Context"},"content":"This is the first of a two-part tutorial on how to upload your data to EarthCODE. In this  part we will create a new Catalog using PySTAC. This Catalog should be self-contained and should not be uploaded directly to the Open Science Catalog (OSC). Instead, it should be uploaded to some persistent storage. In this example we will upload it to a open-access repository on GitHub. In the next tutorial when we will create an OSC entry, we will simply add a reference to our Item-Catalog as a “remote-child”.","type":"content","url":"/creating-an-item-catalog#description","position":7},{"hierarchy":{"lvl1":"Creating a STAC Item Catalog","lvl5":"STAC Items","lvl4":"Description","lvl3":"Context"},"type":"lvl5","url":"/creating-an-item-catalog#stac-items","position":8},{"hierarchy":{"lvl1":"Creating a STAC Item Catalog","lvl5":"STAC Items","lvl4":"Description","lvl3":"Context"},"content":"A STAC Item is the lowest level component of a STAC catalog. All STAC Items must have an associated data Asset, in addition to the Asset (which you can think of as a data file), the Item also contains metadata about the data itself, such as:\n\nSpatiotemporal extent\n\nData collection (e.g. Sentinel or Landsat)\n\nBands\n\nCloud Cover\n\nImportant\n\nThink about the persistence of your data!\nIf your data files are not currently stored in an open-access and persistent storage, you can contact the ESA team who can upload your data to the ESA S3 bucket. The same applies for the repository we will upload our STAC Item Catalog to!","type":"content","url":"/creating-an-item-catalog#stac-items","position":9},{"hierarchy":{"lvl1":"Creating a STAC Item Catalog","lvl4":"Prerequisites","lvl3":"Context"},"type":"lvl4","url":"/creating-an-item-catalog#prerequisites","position":10},{"hierarchy":{"lvl1":"Creating a STAC Item Catalog","lvl4":"Prerequisites","lvl3":"Context"},"content":"In this example we assume that the data files are already uploaded to a remote storage, and we have a TXT file with the download URLs, but feel free to modify this example for your own data files!\n\nIn this example we will be using this supraglacial lakes dataset: \n\nhttps://​zenodo​.org​/records​/7568049​#​.ZDbG4nbP1aQ. We have downloaded the some of the individual links to a txt file with the following content:# ./tif_links.txt\nhttps://zenodo.org/records/7568049/files/extent_S1B_EW_GRDH_1SDH_20171111T205337_20171111T205438_008239_00E91A_F8D1.tif\nhttps://zenodo.org/records/7568049/files/extent_S1B_EW_GRDH_1SDH_20190224T203744_20190224T203844_015093_01C356_B9C1.tif\nhttps://zenodo.org/records/7568049/files/extent_S1B_EW_GRDH_1SDH_20170620T205332_20170620T205433_006139_00AC89_6857.tif\nhttps://zenodo.org/records/7568049/files/extent_S1B_EW_GRDH_1SDH_20180923T202118_20180923T202218_012847_017B82_7DD5.tif\nhttps://zenodo.org/records/7568049/files/extent_S1B_EW_GRDH_1SDH_20181108T203747_20181108T203847_013518_01903B_D463.tif\n\n","type":"content","url":"/creating-an-item-catalog#prerequisites","position":11},{"hierarchy":{"lvl1":"Creating a STAC Item Catalog","lvl3":"Loading Libraries"},"type":"lvl3","url":"/creating-an-item-catalog#loading-libraries","position":12},{"hierarchy":{"lvl1":"Creating a STAC Item Catalog","lvl3":"Loading Libraries"},"content":"\n\nimport json\nimport time\nimport requests\n\nimport pystac\nimport rasterio\nfrom pathlib import Path\n\n","type":"content","url":"/creating-an-item-catalog#loading-libraries","position":13},{"hierarchy":{"lvl1":"Creating a STAC Item Catalog","lvl2":"Creating the Item Catalog"},"type":"lvl2","url":"/creating-an-item-catalog#creating-the-item-catalog","position":14},{"hierarchy":{"lvl1":"Creating a STAC Item Catalog","lvl2":"Creating the Item Catalog"},"content":"Our items need to be contained in its own STAC Catalog. This catalog will should also include some general information about our dataset.\n\ntitle = \"Item Catalog Example\"\ndescription = \"A collection of supraglacial lakes data in a very useful example notebook.\"\ncatalog_id = \"supraglacial-lakes-example-2025\"\n\ncatalog = pystac.Catalog(\n    id=catalog_id,\n    title=title,\n    description=description,\n)\n\ncatalog\n\nThat’s all! Most of the metadata will be added to the Items which we will add to this catalog shortly.\n\n","type":"content","url":"/creating-an-item-catalog#creating-the-item-catalog","position":15},{"hierarchy":{"lvl1":"Creating a STAC Item Catalog","lvl3":"Creating a single STAC Item","lvl2":"Creating the Item Catalog"},"type":"lvl3","url":"/creating-an-item-catalog#creating-a-single-stac-item","position":16},{"hierarchy":{"lvl1":"Creating a STAC Item Catalog","lvl3":"Creating a single STAC Item","lvl2":"Creating the Item Catalog"},"content":"Manually creating STAC Items can be cumbersome and is prone to errors (but possible!). Luckily there are many tools that can make the process a lot easier.\n\nHere we will use rio_stac \n\n(documentation here) which is a library that we can use to open and extract metadata from raster datasets.\n\nfilenames = []\n\nwith open(\"tif_links.txt\", \"r\") as f:\n    for line in f.readlines():\n        filename = line.strip()\n        if Path(filename).suffix == \".tif\":\n            filenames.append(filename)\n\nprint(f\"Number of files found: {len(filenames)}\")\nprint(f\"Example link: {filenames[0]}\")\n\nfrom rio_stac import create_stac_item\n\nitem = create_stac_item(\n    source=filenames[0],\n    id=\"item_1\",\n    asset_name=\"data\",  # EarthCODE standard asset name\n    with_eo=True,  # all the metadata!\n    with_proj=True,\n    with_raster=True,\n)\n\nInspecting the result we can se that this function has extracted rich information about our raster file. This information is attached to the Item. This Item also have an \"assets\" attribute which references the actual data.\n\nImportant: Verify that your references always point to the remote open storage!\n\nitem\n\n","type":"content","url":"/creating-an-item-catalog#creating-a-single-stac-item","position":17},{"hierarchy":{"lvl1":"Creating a STAC Item Catalog","lvl3":"Creating the rest of our Items","lvl2":"Creating the Item Catalog"},"type":"lvl3","url":"/creating-an-item-catalog#creating-the-rest-of-our-items","position":18},{"hierarchy":{"lvl1":"Creating a STAC Item Catalog","lvl3":"Creating the rest of our Items","lvl2":"Creating the Item Catalog"},"content":"Now that we have shown how to generate a single Item using rio_stac, we can repeat the process for the rest of our data files. The goal is to create a list of STAC Items, that we can add to our Catalog with the buit-in Catalog.add_items() method.\n\nWe could in principle just iterate over the method above, but in order to respect the rate limits for our data provider (Zenodo), we define a function which reads the response headers and responds appropriately.\n\nThis function also saves the file to a local temporary destination instead of reading the data from Zenodo directly.\n\nimport time\nimport requests\n\ndef download_zenodo_file(url: str, local_path: str, max_retries: int = 5) -> None:\n    \"\"\"\n    Download a file from Zenodo into local_path, respecting rate limits if we hit 429 responses.\n    \n    :param url: The direct download URL from Zenodo.\n    :param local_path: Where to save the file locally.\n    :param max_retries: Number of times to retry the download if repeatedly rate-limited.\n    \"\"\"\n    attempt = 0\n    \n    while attempt < max_retries:\n        response = requests.get(url, stream=True)\n        \n        if response.status_code == 200:\n            with open(local_path, 'wb') as f:\n                for chunk in response.iter_content(chunk_size=8192):\n                    f.write(chunk)\n            return \n        \n        # If rate-limited (HTTP 429), then check rate-limit headers and wait.\n        elif response.status_code == 429:\n            attempt += 1\n            if reset_timestamp := response.headers.get(\"X-RateLimit-Reset\") is not None:\n                now = time.time()\n                wait_seconds = int(reset_timestamp) - int(now)\n                wait_seconds = max(wait_seconds, 1)  # Wait at least 1 second.\n                print(f\"Got 429 Too Many Requests. Waiting ~{wait_seconds} seconds.\")\n                time.sleep(wait_seconds)\n        else:\n            response.raise_for_status()\n    \n    raise RuntimeError(f\"Failed to download {url} after {max_retries} retries.\")\n\nNow we can iterate over the rest of our data files and create the STAC items.\n\nimport rasterio\n\nitems = []\nlocal_tmp_file = \"tmp.tif\"\n\nfor idx, remote_url in enumerate(filenames[0:]):\n    # Save our dataset to the temporary file\n    download_zenodo_file(remote_url, local_tmp_file)\n\n    # Inspect the local file and create a STAC Item\n    item = create_stac_item(\n        source=local_tmp_file,\n        id=f\"item_{idx+1}\",\n        asset_name=\"data\",\n        asset_href=remote_url,  # Explicitly set the asset reference to the remote one!\n        with_eo=True,\n        with_proj=True,\n        with_raster=True,\n    )\n\n    items.append(item)\n\n# Verify that our items all point to the correct reference\nfor item in items:\n    print(item.assets['data'].href)\n\nLooks good!\n\n","type":"content","url":"/creating-an-item-catalog#creating-the-rest-of-our-items","position":19},{"hierarchy":{"lvl1":"Creating a STAC Item Catalog","lvl3":"Adding Items to our Item Catalog","lvl2":"Creating the Item Catalog"},"type":"lvl3","url":"/creating-an-item-catalog#adding-items-to-our-item-catalog","position":20},{"hierarchy":{"lvl1":"Creating a STAC Item Catalog","lvl3":"Adding Items to our Item Catalog","lvl2":"Creating the Item Catalog"},"content":"Now that we have defined our items, we can add them to our catalog.\n\ncatalog.add_items(items)\n\ncatalog\n\n","type":"content","url":"/creating-an-item-catalog#adding-items-to-our-item-catalog","position":21},{"hierarchy":{"lvl1":"Creating a STAC Item Catalog","lvl3":"Saving the Catalog","lvl2":"Creating the Item Catalog"},"type":"lvl3","url":"/creating-an-item-catalog#saving-the-catalog","position":22},{"hierarchy":{"lvl1":"Creating a STAC Item Catalog","lvl3":"Saving the Catalog","lvl2":"Creating the Item Catalog"},"content":"If we inspect the Catalog, we can see that it now contains Links to the Items, but they links themselves don’t contain any references.\n\nWith PySTAC, the real magic happens when you normalize and save the Catalog. This is when all the links are resolved, and a folder structure will be laid out following best practices, automatically!\n\nWhat we will do is to specify a target location, which will become the root folder of our Catalog. When we normalize the Catalog to this folder, all the internal references will be resolved with relative paths. When we save the Catalog, PySTAC will generate the JSON files in the folder we just normalized to.\n\nWe normalize and save the Catalog as “self contained”. Here is the description of a self-contained catalog from the \n\nPySTAC API documentation:\n\n“A ‘self-contained catalog’ is one that is designed for portability. Users may want to download an online catalog from and be able to use it on their local computer, so all links need to be relative.”\n\nIn other words, exactly what we want to make our data accessible!\n\noutput_folder = \"supraglacial-lakes-item-catalog\"\n\ncatalog.normalize_and_save(root_href=output_folder, catalog_type=pystac.CatalogType.SELF_CONTAINED)\n\nIf you inspect the Catalog you can see that PySTAC has added a few more links to our Catalog, namely to the root catalog and itself, which in this istance is the same.\n\nAlso notice that the Link.href attributes show absolute paths in the notebook. However, you should now have the actual STAC catalog saved in the output_folder.\n\nThe folder will have the following structure:supraglacial-lakes-item-catalog\n├── catalog.json\n├── item_1\n│   └── item_1.json\n├── item_2\n│   └── item_2.json\n├── item_3\n│   └── item_3.json\n├── item_4\n│   └── item_4.json\n└── item_5\n    └── item_5.json\n\nLooking at the catalog.json:{\n  \"type\": \"Catalog\",\n  \"id\": \"supraglacial-lakes-example-2025\",\n  \"stac_version\": \"1.1.0\",\n  \"description\": \"A collection of supraglacial lakes data in a very useful example notebook.\",\n  \"links\": [\n    {\n      \"rel\": \"root\",\n      \"href\": \"./catalog.json\",\n      \"type\": \"application/json\",\n      \"title\": \"Item Catalog Example\"\n    },\n    {\n      \"rel\": \"item\",\n      \"href\": \"./item_1/item_1.json\",\n      \"type\": \"application/geo+json\"\n    },\n    {\n      \"rel\": \"item\",\n      \"href\": \"./item_2/item_2.json\",\n      \"type\": \"application/geo+json\"\n    },\n    {\n      \"rel\": \"item\",\n      \"href\": \"./item_3/item_3.json\",\n      \"type\": \"application/geo+json\"\n    },\n    {\n      \"rel\": \"item\",\n      \"href\": \"./item_4/item_4.json\",\n      \"type\": \"application/geo+json\"\n    },\n    {\n      \"rel\": \"item\",\n      \"href\": \"./item_5/item_5.json\",\n      \"type\": \"application/geo+json\"\n    }\n  ],\n  \"title\": \"Item Catalog Example\"\n}\n\nwe can verify that everything looks correct.\n\nThe item JSON files should have the following links:  \"links\": [\n    {\n      \"rel\": \"root\",\n      \"href\": \"../catalog.json\",\n      \"type\": \"application/json\",\n      \"title\": \"Item Catalog Example\"\n    },\n    {\n      \"rel\": \"parent\",\n      \"href\": \"../catalog.json\",\n      \"type\": \"application/json\",\n      \"title\": \"Item Catalog Example\"\n    }\n  ],\n\n... among all the other metadata we have added.\n\nThat's it! We have now created a self-contained STAC Item Catalog that contains all the metadata of our data, in compliance with the EarthCODE specifications for FAIR and open science. Now we just need to upload it to somewhere people can access it.\n\n","type":"content","url":"/creating-an-item-catalog#saving-the-catalog","position":23},{"hierarchy":{"lvl1":"Creating a STAC Item Catalog","lvl3":"Upload the Item Catalog","lvl2":"Creating the Item Catalog"},"type":"lvl3","url":"/creating-an-item-catalog#upload-the-item-catalog","position":24},{"hierarchy":{"lvl1":"Creating a STAC Item Catalog","lvl3":"Upload the Item Catalog","lvl2":"Creating the Item Catalog"},"content":"In this part we will upload the Catalog in order to make it available. Feel free to do this in any way you like as long as you are sure the files will remain accessible!\n\nA good option is to upload the files we just created to GitHub. In the next part of the tutorial, when we will create an entry to the Open Science Data Catalog, we will only need the URL for the catalog.json we have in our root. The STAC browser will read the files directly from this repository and extract all the information from our Items automatically.\n\nWe will now show how this can be done with GitHub and the git CLI.\n\n","type":"content","url":"/creating-an-item-catalog#upload-the-item-catalog","position":25},{"hierarchy":{"lvl1":"Creating a STAC Item Catalog","lvl4":"Create a public GitHub repository","lvl3":"Upload the Item Catalog","lvl2":"Creating the Item Catalog"},"type":"lvl4","url":"/creating-an-item-catalog#create-a-public-github-repository","position":26},{"hierarchy":{"lvl1":"Creating a STAC Item Catalog","lvl4":"Create a public GitHub repository","lvl3":"Upload the Item Catalog","lvl2":"Creating the Item Catalog"},"content":"Go to \n\ngithub.com/new and create a remote repository. Here we will name it the same as our local folder, make sure it is set to public, and ignore everything else.\n\n\n\nGitHub create a new repository\n\nAfter creating the repository, you can simply click upload existing files to upload your files manually, or if you are comfortable with git, do it through the command line interface:# Navigate to the Item Catalog we want to upload\ncd supraglacial-lakes-item-catalog\n\n# Initialise it as a git repository\ngit init\n\n# Add the URL to your newly created GitHub repository as the remote version of your local files\ngit remote add origin https://github.com/<username>/supraglacial-lakes-item-catalog.git\n\n# Add and commit your files\ngit add --all\ngit commit -m \"Useful commit message\"\n\n# Set the remote main as the upstream version of your local main, and push your changes\ngit push --set-upstream origin main\n\nWhen you refresh GitHub page, you should see your STAC catalog.\n\n\n\nNew GitHub repository\n\nThat’s it!\n\nIn the next stages we will explain how to create and add your product to the Open Science Catalog, linking to the Items we just created.","type":"content","url":"/creating-an-item-catalog#create-a-public-github-repository","position":27},{"hierarchy":{"lvl1":"EarthCODE Notebooks"},"type":"lvl1","url":"/","position":0},{"hierarchy":{"lvl1":"EarthCODE Notebooks"},"content":"Welcome to the EarthCODE notebook collection","type":"content","url":"/","position":1}]}